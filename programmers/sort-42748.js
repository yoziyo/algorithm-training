/*
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.

입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]

입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.
*/

function solution(array, commands) {
  return commands.map((command) => {
    // Deepcopy
    let origin = array.slice();

    return origin.splice(command[0] - 1, Math.abs(command[0] - command[1]) + 1).sort((arrayA, arrayB) => arrayA - arrayB)[command[2] - 1];
  });
}

/*
COMMENT:
- 반복하면서 array값이 깨지므로, splice에 아무것도 처리하지 않고, 빈 변수에 카피 해줌 (얕은복사는 레퍼런스가 복사되므로 깊은복사)
- splice 는 start index '부터' 자르고 싶은 수 를 설정하는 것이라서, 시작 - 목표 + 1 를 넣어줌
  - 여기서 +1 은 자르려고 하는 목표치에 본인~본인까지 일 경우 0인데, 그러므로 본인을 포함 해 줌
- sort를 명시적 으로 넣어 준 이유는, 없다면 숫자 값을 유니코드로 정렬 하다보니 원하는 목표 정렬이 안될 수 도 있음
- 굳이 splice 를 안쓰고 filter 로 index를 분리해도 될 것 같고..
*/
